
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # *****************************************************************************
> # R Script implementing exhaustive validation, which is used as the reference.  
> # Related to the paper "Dealing with clustered samples for assessing map 
> # accuracy by cross-validation".
> # Contact: Sytze de Bruin, Wageningen University, Laboratory of Geo-information
> # Science and Remote Sensing, email: sytze.debruin@wur.nl
> # May 3, 2022
> # *****************************************************************************
> # Sys.sleep(round(runif(1, min = 1, max = 240)))
> # ****** load required libraries *******
> .libPaths("/home/j/j_bahl03/R")
> library(ranger)
> library(terra)
terra 1.5.34
> library(parallel)
> 
> # ************ GLOBALS ***************
> samples   <- c("clusterMedium", "clusterStrong", "clusterGapped", "regular", 
+                "simpleRandom")
> # infolder1 <- "../data"
> # infolder2 <- "../samples"
> # outfolder <- "../CVresults"
> infolder1 <- "~/deBruin_add_nndm/data"
> infolder2 <- "~/deBruin_add_nndm/samples"
> outfolder <- "~/deBruin_add_nndm/CVresults"
> startseed <- 1234567
> n_samp    <- 100  # number of sample replicates (for each design)
> cores <- 20
> 
> # create outfolders if they don't exist
> if(!dir.exists(outfolder))
+   dir.create(outfolder)
> 
> if(!dir.exists(paste0(outfolder, "/exhaustive")))
+   dir.create(paste0(outfolder, "/exhaustive"))
> 
> # csv_file <- file.path(outfolder, "exhaustive", "runs.csv")
> # runs <- read.csv(csv_file)
> # lastIndex <- runs[nrow(runs),1]
> # thisIndex <- lastIndex + 1
> # print(paste0("this Index is: ", thisIndex))
> # runs[thisIndex,1] <- thisIndex
> # write.csv(runs, file = csv_file, row.names = FALSE)
> 
> # download data from https://doi.org/10.5281/zenodo.6513429
> # ****** load input raster data ******
> msk <- rast(file.path(infolder1, "TOTmask.tif"))
> AGBstack <- rast(file.path(infolder1, "AGBstack.tif"))
> OCSstack <- rast(file.path(infolder1, "OCSstack.tif"))
> 
> OCt <- rast(file.path(infolder1, "ocs.tif"))
> AGt <- rast(file.path(infolder1, "agb.tif"))
> OCS <- mask(OCt, msk, filename="tmpocs.tif", overwrite=T)
> AGB <- mask(AGt, msk, filename="tmpagb.tif", overwrite=T)
> rm(AGt, OCt)
> 
> 
> # ************ FUNCTIONS ***************
> predfun <- function(object, newdata){
+   pred <- predict(object, newdata)
+   pred[[1]]
+ }
> 
> mecfu <- function(ref, pred){
+   muref <- global(ref, "mean", na.rm=T)[[1]]
+   residsq <- (ref - pred)^2
+   SSR <- global(residsq, "sum", na.rm=T)[[1]]
+   rm(residsq)
+   residsq <- (ref - muref)^2
+   SST <- global(residsq, "sum", na.rm=T)[[1]]
+   1 - SSR/SST
+ }
> 
> rmsefu <- function(ref, pred){
+   residsq <- (ref - pred)^2
+   sqrt(global(residsq, "mean", na.rm=T)[[1]])
+ }
> 
> mefu <- function(ref, pred){
+   resmap <- ref - pred
+   global(resmap, "mean", na.rm=T)[[1]]
+ }
> 
> exhaustive <- function(smpl, number, variate, seed){
+   
+   fname1 <- paste0(variate, "data", sprintf("%03d", number), ".Rdata")
+   fname2 <- paste0(variate, smpl, sprintf("%03d", number), ".tif")
+   
+   f_in  <- file.path(infolder2,smpl,fname1)
+   f_out <- file.path(outfolder, "exhaustive", fname2)
+   
+   load(f_in)
+   
+   set.seed(seed)
+   
+   if(variate == "AGB"){
+     RFmodel <- ranger(agb~., AGBdata, 
+                       respect.unordered.factors=TRUE)
+     # print(names(AGBdata[,c(2:23)]))
+     # map  <- predict(AGBstack, RFmodel, predfun, filename=f_out, overwrite=T, na.rm=T)
+     map  <- predict(AGBstack, RFmodel, predfun, na.rm=T)
+     ME   <- mefu(AGB, map)
+     RMSE <- rmsefu(AGB, map)
+     MEC  <- mecfu(AGB, map)
+   } else {
+     RFmodel <- ranger(ocs~., OCSdata, 
+                       respect.unordered.factors=TRUE)
+     map  <- predict(OCSstack, RFmodel, predfun, filename=f_out, overwrite=T,
+                     na.rm=T)
+     ME   <- mefu(OCS, map)
+     RMSE <- rmsefu(OCS, map)
+     MEC  <- mecfu(OCS, map)
+   }
+   
+   fname <-  paste0(variate, "_", smpl, sprintf("%03d", number), ".Rdata")
+   f_out <- file.path(outfolder,"exhaustive", fname)
+   save(MEC, ME, RMSE, file=f_out)
+ }
> 
> 
> # ************ CALL THE FUNCTIONS ************ 
> mclapply(seq(n_samp), function(i) {
+   for(smpl in samples) {
+     exhaustive(smpl = smpl, number = i, variate = "AGB", seed = startseed)
+     # exhaustive(smpl = smpl, number = i, variate = "OCS", seed = startseed)
+   }
+ }, mc.cores = cores)

 *** caught bus error ***
address 0x2ad37147d340, cause 'non-existent physical address'

Traceback:
 1: .External(list(name = "CppMethod__invoke_notvoid", address = <pointer: 0x2cd4500>,     dll = list(name = "Rcpp", path = "/home/j/j_bahl03/R/Rcpp/libs/Rcpp.so",         dynamicLookup = TRUE, handle = <pointer: 0xa6febe0>,         info = <pointer: 0x1bd9ef0>), numParameters = -1L), <pointer: 0x405a600>,     <pointer: 0x74e0b80>, .pointer, ...)
 2: x@ptr$readValues(row - 1, nrows, col - 1, ncols)
 3: .local(x, ...)
 4: readValues(object, b$row[i], b$nrows[i], 1, nc, TRUE, TRUE)
 5: readValues(object, b$row[i], b$nrows[i], 1, nc, TRUE, TRUE)
 6: .local(object, ...)
 7: predict(AGBstack, RFmodel, predfun, na.rm = T)
 8: predict(AGBstack, RFmodel, predfun, na.rm = T)
 9: exhaustive(smpl = smpl, number = i, variate = "AGB", seed = startseed)
10: FUN(X[[i]], ...)
11: lapply(X = S, FUN = FUN, ...)
12: doTryCatch(return(expr), name, parentenv, handler)
13: tryCatchOne(expr, names, parentenv, handlers[[1L]])
14: tryCatchList(expr, classes, parentenv, handlers)
15: tryCatch(expr, error = function(e) {    call <- conditionCall(e)    if (!is.null(call)) {        if (identical(call[[1L]], quote(doTryCatch)))             call <- sys.call(-4L)        dcall <- deparse(call)[1L]        prefix <- paste("Error in", dcall, ": ")        LONG <- 75L        sm <- strsplit(conditionMessage(e), "\n")[[1L]]        w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")        if (is.na(w))             w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L],                 type = "b")        if (w > LONG)             prefix <- paste0(prefix, "\n  ")    }    else prefix <- "Error : "    msg <- paste0(prefix, conditionMessage(e), "\n")    .Internal(seterrmessage(msg[1L]))    if (!silent && isTRUE(getOption("show.error.messages"))) {        cat(msg, file = outFile)        .Internal(printDeferredWarnings())    }    invisible(structure(msg, class = "try-error", condition = e))})
16: try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
17: sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
18: FUN(X[[i]], ...)
19: lapply(seq_len(cores), inner.do)
20: mclapply(seq(n_samp), function(i) {    for (smpl in samples) {        exhaustive(smpl = smpl, number = i, variate = "AGB",             seed = startseed)    }}, mc.cores = cores)
An irrecoverable exception occurred. R is aborting now ...

 *** caught bus error ***
address 0x2ad3707d29a3, cause 'non-existent physical address'
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

[[13]]
NULL

[[14]]
NULL

[[15]]
NULL

[[16]]
NULL

[[17]]
NULL

[[18]]
NULL

[[19]]
NULL

[[20]]
NULL

[[21]]
NULL

[[22]]
NULL

[[23]]
NULL

[[24]]
NULL

[[25]]
NULL

[[26]]
NULL

[[27]]
NULL

[[28]]
NULL

[[29]]
NULL

[[30]]
NULL

[[31]]
NULL

[[32]]
NULL

[[33]]
NULL

[[34]]
NULL

[[35]]
NULL

[[36]]
NULL

[[37]]
NULL

[[38]]
NULL

[[39]]
NULL

[[40]]
NULL

[[41]]
NULL

[[42]]
NULL

[[43]]
NULL

[[44]]
NULL

[[45]]
NULL

[[46]]
NULL

[[47]]
NULL

[[48]]
NULL

[[49]]
NULL

[[50]]
NULL

[[51]]
NULL

[[52]]
NULL

[[53]]
NULL

[[54]]
NULL

[[55]]
NULL

[[56]]
NULL

[[57]]
NULL

[[58]]
NULL

[[59]]
NULL

[[60]]
NULL

[[61]]
NULL

[[62]]
NULL

[[63]]
NULL

[[64]]
NULL

[[65]]
NULL

[[66]]
NULL

[[67]]
NULL

[[68]]
NULL

[[69]]
NULL

[[70]]
NULL

[[71]]
NULL

[[72]]
NULL

[[73]]
NULL

[[74]]
NULL

[[75]]
NULL

[[76]]
NULL

[[77]]
NULL

[[78]]
NULL

[[79]]
NULL

[[80]]
NULL

[[81]]
NULL

[[82]]
NULL

[[83]]
NULL

[[84]]
NULL

[[85]]
NULL

[[86]]
NULL

[[87]]
NULL

[[88]]
NULL

[[89]]
NULL

[[90]]
NULL

[[91]]
NULL

[[92]]
NULL

[[93]]
NULL

[[94]]
NULL

[[95]]
NULL

[[96]]
NULL

[[97]]
NULL

[[98]]
NULL

[[99]]
NULL

[[100]]
NULL

Warning message:
In mclapply(seq(n_samp), function(i) { :
  scheduled cores 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 did not deliver results, all values of the jobs will be affected
> 
> proc.time()
    user   system  elapsed 
1799.295  265.935  217.336 
