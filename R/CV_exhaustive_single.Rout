
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # *****************************************************************************
> # R Script implementing exhaustive validation, which is used as the reference.  
> # Related to the paper "Dealing with clustered samples for assessing map 
> # accuracy by cross-validation".
> # Contact: Sytze de Bruin, Wageningen University, Laboratory of Geo-information
> # Science and Remote Sensing, email: sytze.debruin@wur.nl
> # May 3, 2022
> # *****************************************************************************
> # ****** load required libraries *******
> .libPaths("/home/j/jlinnenb/r_packages")
> library(ranger)
> library(terra)
terra 1.6.11
> library(parallel)
> 
> # ************ GLOBALS ***************
> samples   <- c("clusterMedium", "clusterStrong", "clusterGapped", "regular", 
+                "simpleRandom")
> infolder1 <- "/scratch/tmp/jlinnenb/deBruin_add_nndm/data"
> infolder2 <- "/scratch/tmp/jlinnenb/deBruin_add_nndm/samples"
> outfolder <- "/scratch/tmp/jlinnenb/deBruin_add_nndm/CVresults"
> startseed <- 1234567
> n_samp    <- 100  # number of sample replicates (for each design)
> 
> 
> # create outfolders if they don't exist
> if(!dir.exists(outfolder))
+   dir.create(outfolder)
> 
> if(!dir.exists(paste0(outfolder, "/exhaustive")))
+   dir.create(paste0(outfolder, "/exhaustive"))
> 
> if(!file.exists(file.path(outfolder, "exhaustive", "runs.csv"))) {
+   write.csv(data.frame("runs"=0), file.path(outfolder, "exhaustive", "runs.csv"))
+ }
> 
> csv_file <- file.path(outfolder, "exhaustive", "runs.csv")
> runs <- read.csv(csv_file)
> lastIndex <- runs[nrow(runs),1]
> thisIndex <- lastIndex + 1
> print(paste0("this Index is: ", thisIndex))
[1] "this Index is: 2"
> runs[thisIndex,1] <- thisIndex
> write.csv(runs, file = csv_file, row.names = FALSE)
> 
> 
> # download data from https://doi.org/10.5281/zenodo.6513429
> # ****** load input raster data ******
> msk <- rast(file.path(infolder1, "TOTmask.tif"))
> AGBstack <- rast(file.path(infolder1, "AGBstack.tif"))
> OCSstack <- rast(file.path(infolder1, "OCSstack.tif"))
> 
> OCt <- rast(file.path(infolder1, "ocs.tif"))
> AGt <- rast(file.path(infolder1, "agb.tif"))
> OCS <- mask(OCt, msk, filename="tmpocs.tif", overwrite=T)
> AGB <- mask(AGt, msk, filename="tmpagb.tif", overwrite=T)
> rm(AGt, OCt)
> 
> # thisIndex <- 100
> # ************ FUNCTIONS ***************
> predfun <- function(object, newdata){
+   pred <- predict(object, newdata)
+   pred[[1]]
+ }
> 
> mecfu <- function(ref, pred){
+   muref <- global(ref, "mean", na.rm=T)[[1]]
+   residsq <- (ref - pred)^2
+   SSR <- global(residsq, "sum", na.rm=T)[[1]]
+   rm(residsq)
+   residsq <- (ref - muref)^2
+   SST <- global(residsq, "sum", na.rm=T)[[1]]
+   1 - SSR/SST
+ }
> 
> rmsefu <- function(ref, pred){
+   residsq <- (ref - pred)^2
+   sqrt(global(residsq, "mean", na.rm=T)[[1]])
+ }
> 
> mefu <- function(ref, pred){
+   resmap <- ref - pred
+   global(resmap, "mean", na.rm=T)[[1]]
+ }
> 
> exhaustive <- function(smpl, number, variate, seed){
+   
+   fname1 <- paste0(variate, "data", sprintf("%03d", number), ".Rdata")
+   fname2 <- paste0(variate, smpl, sprintf("%03d", number), ".tif")
+   
+   f_in  <- file.path(infolder2,smpl,fname1)
+   f_out <- file.path(outfolder, "exhaustive", fname2)
+   
+   load(f_in)
+   
+   set.seed(seed)
+   
+   if(variate == "AGB"){
+     RFmodel <- ranger(agb~., AGBdata, 
+                       respect.unordered.factors=TRUE)
+     # print(names(AGBdata[,c(2:23)]))
+     # map  <- predict(AGBstack, RFmodel, predfun, filename=f_out, overwrite=T, na.rm=T)
+     map  <- predict(AGBstack, RFmodel, predfun, na.rm=T)
+     ME   <- mefu(AGB, map)
+     RMSE <- rmsefu(AGB, map)
+     MEC  <- mecfu(AGB, map)
+   } else {
+     RFmodel <- ranger(ocs~., OCSdata, 
+                       respect.unordered.factors=TRUE)
+     map  <- predict(OCSstack, RFmodel, predfun, filename=f_out, overwrite=T,
+                     na.rm=T)
+     ME   <- mefu(OCS, map)
+     RMSE <- rmsefu(OCS, map)
+     MEC  <- mecfu(OCS, map)
+   }
+   
+   fname <-  paste0(variate, "_", smpl, sprintf("%03d", number), ".Rdata")
+   f_out2 <- file.path(outfolder,"exhaustive", fname)
+   save(MEC, ME, RMSE, file=f_out2)
+   file.remove(f_out)
+ }
> 
> 
> # ************ CALL THE FUNCTIONS ************ 
> mclapply(list("AGB", "OCS"), function(x) {
+   for(smpl in samples) {
+     i <- thisIndex
+     exhaustive(smpl, i, x, startseed)
+   }
+ }, mc.cores = 2)
Predicting.. Progress: 10%. Estimated remaining time: 6 minutes, 9 seconds.
Predicting.. Progress: 5%. Estimated remaining time: 9 minutes, 25 seconds.
Predicting.. Progress: 22%. Estimated remaining time: 4 minutes, 15 seconds.
Predicting.. Progress: 15%. Estimated remaining time: 7 minutes, 59 seconds.
Predicting.. Progress: 32%. Estimated remaining time: 4 minutes, 13 seconds.
Predicting.. Progress: 24%. Estimated remaining time: 6 minutes, 1 seconds.
Predicting.. Progress: 44%. Estimated remaining time: 3 minutes, 9 seconds.
Predicting.. Progress: 33%. Estimated remaining time: 4 minutes, 49 seconds.
Predicting.. Progress: 42%. Estimated remaining time: 3 minutes, 59 seconds.
Predicting.. Progress: 53%. Estimated remaining time: 2 minutes, 47 seconds.
Predicting.. Progress: 50%. Estimated remaining time: 3 minutes, 24 seconds.
Predicting.. Progress: 64%. Estimated remaining time: 2 minutes, 4 seconds.
Predicting.. Progress: 74%. Estimated remaining time: 1 minute, 27 seconds.
Predicting.. Progress: 58%. Estimated remaining time: 2 minutes, 58 seconds.
Predicting.. Progress: 65%. Estimated remaining time: 2 minutes, 29 seconds.
Predicting.. Progress: 82%. Estimated remaining time: 1 minute, 4 seconds.
Predicting.. Progress: 72%. Estimated remaining time: 1 minute, 58 seconds.
Predicting.. Progress: 94%. Estimated remaining time: 20 seconds.
Predicting.. Progress: 80%. Estimated remaining time: 1 minute, 26 seconds.
Aggregating predictions.. Progress: 10%. Estimated remaining time: 4 minutes, 55 seconds.
Predicting.. Progress: 87%. Estimated remaining time: 54 seconds.
Aggregating predictions.. Progress: 19%. Estimated remaining time: 4 minutes, 25 seconds.
Predicting.. Progress: 95%. Estimated remaining time: 20 seconds.
Aggregating predictions.. Progress: 28%. Estimated remaining time: 3 minutes, 55 seconds.
Aggregating predictions.. Progress: 9%. Estimated remaining time: 5 minutes, 22 seconds.
Aggregating predictions.. Progress: 38%. Estimated remaining time: 3 minutes, 24 seconds.
Aggregating predictions.. Progress: 18%. Estimated remaining time: 4 minutes, 49 seconds.
Aggregating predictions.. Progress: 47%. Estimated remaining time: 2 minutes, 52 seconds.
Aggregating predictions.. Progress: 26%. Estimated remaining time: 4 minutes, 19 seconds.
Aggregating predictions.. Progress: 57%. Estimated remaining time: 2 minutes, 22 seconds.
Aggregating predictions.. Progress: 35%. Estimated remaining time: 3 minutes, 48 seconds.
Aggregating predictions.. Progress: 66%. Estimated remaining time: 1 minute, 51 seconds.
Aggregating predictions.. Progress: 44%. Estimated remaining time: 3 minutes, 17 seconds.
Aggregating predictions.. Progress: 76%. Estimated remaining time: 1 minute, 19 seconds.
Aggregating predictions.. Progress: 53%. Estimated remaining time: 2 minutes, 46 seconds.
Aggregating predictions.. Progress: 85%. Estimated remaining time: 48 seconds.
Aggregating predictions.. Progress: 62%. Estimated remaining time: 2 minutes, 15 seconds.
Aggregating predictions.. Progress: 95%. Estimated remaining time: 17 seconds.
Aggregating predictions.. Progress: 70%. Estimated remaining time: 1 minute, 44 seconds.
Aggregating predictions.. Progress: 87%. Estimated remaining time: 43 seconds.
Predicting.. Progress: 13%. Estimated remaining time: 3 minutes, 40 seconds.
Predicting.. Progress: 34%. Estimated remaining time: 2 minutes, 2 seconds.
Predicting.. Progress: 52%. Estimated remaining time: 1 minute, 26 seconds.
Predicting.. Progress: 72%. Estimated remaining time: 49 seconds.
Predicting.. Progress: 91%. Estimated remaining time: 16 seconds.
Aggregating predictions.. Progress: 18%. Estimated remaining time: 2 minutes, 24 seconds.
